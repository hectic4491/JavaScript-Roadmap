// The Event Interface

/**Event
 * 
 * The Event interface represents an event which takes place on an
 * EventTarget.
 * 
 * An event can be triggered by the user action e.g.: clicking the mouse
 * button or tapping the keyboard, or generated by APIs to represent the
 * progress of an asynchronous task. It can also be triggered 
 * programmatically, such as by calling the HTMLElement.click() method
 * of an element, or by defining the event, then sending it to a
 * specified target using EventTarget.dispatchEvent().
 * 
 * There are many types of events, some of which use other interfaces
 * based on the main Event interface. Event itself contains the 
 * properties and methods which are common to all events.
 * 
 * Many DOM elements can be set up to accept (or "listen for") these
 * events, and execute code in response to process (or "handle") them.
 * Event-handlers are usually connected (or "attached") to various 
 * HTML Elements (such as <button>, <div>, <span>, etc.) using 
 * EventTarget.addEventListener(), and this generally replaces using the
 * old HTML event handler attributes. Further, when properly added, such
 * handlers can also be disconnected if needed using
 * removeEventListener().
 * 
 * Note: One element can have several such handlers, even for the exact
 * same event - particularly if separate, independent code modules attach
 * them, each for its own independent purposes. (e.g.: a webpage with an
 * advertising module and statistics module both monitoring video
 * watching.)
 * 
 * When there are many nested elements, each with its own handler(s), 
 * event processing can become very complicated - especially where a
 * parent element receives the very same event as its child elements 
 * because "Spatially" they overlap so the event technically occurs in
 * both, and the processing order of such events depends on the 'Event
 * bubbling' settings of each handler triggered.
 */
